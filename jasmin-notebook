#! /usr/bin/env python

from sys import exit, argv, stdout, stderr
from signal import signal, SIGINT, SIGTERM
import os
from os.path import join as join_path
import optparse
from subprocess import Popen, PIPE, STDOUT
from pipes import quote as quote_single
from webbrowser import open as open_url

# option: script to run on login (local or remote)
# option: commands to run on login
# option: run notebook server locally and cluster remotely
# why are the '\r's needed?


class Formatter (optparse.IndentedHelpFormatter):
    """optparse text formatter to handle multiple description paragraphs."""

    def format_description (self, desc):
        # split by \n\n as if splitting by \n, but don't split by \n
        desc = desc.split('\n\n')
        desc = sum(([s, ''] for s in desc), [])
        if desc:
            desc = desc[:-1]
        # split by \\n\n
        desc = sum((s.split('\\n\n') for s in desc), [])
        # format each split line separately
        result = []
        for s in desc:
            s = optparse.IndentedHelpFormatter.format_description(self, s)
            result.append(s.strip('\n'))
        # join back up
        result = '\n'.join(result)
        return result

def finish (sig, process):
    """Signal handler."""
    process.send_signal(sig)

def printer_head (category):
    if loud:
        return '[{0}]'.format(category.upper())
    else:
        return '{0}:'.format(category.lower())

def error (msg, code, process = None):
    """Print an error message and exit."""
    print >> stderr, printer_head('error'), msg
    if process is not None:
        finish(SIGTERM, process)
        process.wait()
    exit(code)

def mk_printer (category, dest = stdout, need_verbose = False):
    """Create and return a function that prints messages."""
    def printer (*msgs):
        if need_verbose and not verbose:
            return
        print >> dest, printer_head(category),
        for msg in msgs[:-1]:
            print >> dest, msg,
        print >> dest, msgs[-1]
    return printer

info = mk_printer('info', need_verbose = True)
warn = mk_printer('warning', stderr)

def quote (args):
    """pipes.quote wrapper to handle lists of args and empty args."""
    if isinstance(args, basestring):
        return quote_single(args) if args else '""'
    else:
        return [quote_single(s) if s else '""' for s in args]

def print_popen_cmd (cmd):
    """Print a list of commands as taken by subprocess.Popen.

The output can be safely run in a shell.

"""
    escaped_cmd = ' '.join(quote(arg) for arg in cmd)
    info('running command:', '[[[ {0} ]]]'.format(escaped_cmd))

def check_ssh ():
    """Check local SSH environment for problems."""
    # check for ssh-agent: let ssh-add do the work
    try:
        p = Popen(('ssh-add', '-l'), stdout = PIPE, stderr = STDOUT)
    except OSError:
        warn('couldn\'t run ssh-add')
    else:
        out = p.communicate()[0]
        rtn = p.returncode
        if rtn == 1:
            warn('ssh-agent doesn\'t appear to have any keys')
        elif rtn == 2:
            warn('ssh-agent doesn\'t appear to be running')


def start (host, ipython_args, local_port, remote_port, directory, ipython,
           browser):
    """Start the IPython notebook on the VM."""
    check_ssh()
    # construct ipython command
    ipython_cmd = [quote(ipython), 'notebook', '--no-browser']
    ipython_cmd.append('--port={0}'.format(remote_port))
    ipython_cmd += quote(ipython_args)
    # construct shell commands - make sure to quote input
    if directory is not None:
        cmds = [('cd', quote(directory))]
        if verbose:
            cmds.append('echo [INFO] now in \\"`pwd`\\"')
    else:
        cmds = []
    cmds.append(['exec'] + ipython_cmd)
    cmds = [cmd if isinstance(cmd, basestring) else ' '.join(cmd) \
            for cmd in cmds]
    cmds = ' && '.join(cmds)
    # construct ssh command
    # 'ssh <command>' runs '$SHELL -c <command>'
    ssh_opts = ['-t']
    ssh_opts.append('-L{0}:localhost:{1}'.format(local_port, remote_port))
    ssh_cmd = ['ssh'] + ssh_opts + [host, 'bash -c {0}'.format(quote(cmds))]
    # run command
    print_popen_cmd(ssh_cmd)
    try:
        process = Popen(ssh_cmd, stdout = PIPE, stderr = STDOUT)
    except OSError:
        error('couldn\'t run ssh', ERR_EXEC)
    # set up signal handlers
    signal(SIGINT, lambda sig, frame: finish(sig, process))
    signal(SIGTERM, lambda sig, frame: finish(sig, process))
    # look through stdout for a specific printed line
    search_line = '[NotebookApp] The IPython Notebook is running at:'
    err_line = 'channel_setup_fwd_listener: cannot listen to port:'
    success = False
    while True:
        s = process.stdout.readline()
        if len(s) == 0:
            # something went wrong
            break
        if s.startswith(search_line):
            if str(remote_port) + '/' not in s:
                # printed port isn't the one we wanted
                error('couldn\'t set up port forwarding: remote port ({0}) ' \
                      'is in use\r'.format(remote_port), ERR_NET, process)
            else:
                # replace remote with local port
                stdout.write(s.replace(str(remote_port), str(local_port)))
                success = True
                break
        # write line back out
        stdout.write(s)
        if s.startswith(err_line):
            # ssh error
            error('couldn\'t set up port forwarding: local port ({0}) is ' \
                  'in use\r'.format(local_port), ERR_NET, process)
    # open in browser
    if success and browser:
        url = 'http://127.0.0.1:{0}/'.format(local_port)
        info('opening browser to {0}\r'.format(url))
        open_url(url)
    # no way to switch output back to stdout, so we need to relay everything
    while True:
        # read one character at a time so that input is echoed immediately
        c = process.stdout.read(1)
        if len(c) == 0:
            # process has finished
            break
        stdout.write(c)
        stdout.flush()
    ret = process.wait()
    info('return code:', ret)
    return translate_ret(ret)

def cmd_for_config_file (profile, component):
    """Return escaped commands for accessing a configuration file.

Returns a tuple of commands; the first must be executed directly, after which
the second is safe to use as an expression that gives the file path.

"""
    return ('d="$(ipython locate profile {0})"'.format(quote(profile)),
            '"$d"/{0}_config.py'.format(quote(component)))

def getconf (host, component, profile, ipython):
    """Get an IPython configuration file from the VM."""
    # construct command
    do, f = cmd_for_config_file(profile, component)
    cmds = '{0} && cat {1}'.format(do, f)
    ssh_opts = []
    if not verbose:
        ssh_opts.append('-q')
    ssh_cmd = ['ssh'] + ssh_opts + [host, 'bash -c {0}'.format(quote(cmds))]
    # run command
    print_popen_cmd(ssh_cmd)
    try:
        process = Popen(ssh_cmd)
    except OSError:
        error('couldn\'t run ssh', ERR_EXEC)
    ret = process.wait()
    if not verbose and ret == 255:
        # ssh error
        error('ssh: couldn\'t log in to the given host', ERR_NET)
    info('return code:', ret)
    return translate_ret(ret)

def setconf (host, component, profile, local_profile, local_file, no_clobber,
             ipython):
    """Upload an IPython configuration file to the VM."""
    # find local file
    if local_file is None:
        if local_profile is None:
            local_profile = profile
        # try known dirs
        home = os.path.expanduser('~')
        profile_dir = 'profile_' + local_profile
        file_name = component + '_config.py'
        for d in (('.ipython',), ('.config', 'ipython')):
            f = join_path(*((home,) + d + (profile_dir, file_name)))
            if os.path.isfile(f):
                local_file = f
                break
        if local_file is None:
            # didn't find anything
            msg = 'couldn\'t find {0} under profile {1}'
            error(msg.format(file_name, local_profile), ERR_OTHER)
    # construct command
    cmds = []
    if no_clobber:
        cmds.append('set -o noclobber') # assuming Bash
    do, f = cmd_for_config_file(profile, component)
    cmds.append('{0} && tee > {1}'.format(do, f))
    cmds = '\n'.join(cmds)
    ssh_opts = []
    if not verbose:
        ssh_opts.append('-q')
    ssh_cmd = ['ssh'] + ssh_opts + [host, 'bash -c {0}'.format(quote(cmds))]
    # run command
    print_popen_cmd(ssh_cmd)
    try:
        process = Popen(ssh_cmd, stdin = PIPE)
    except OSError:
        error('couldn\'t run ssh', ERR_EXEC)
    # pass config file on stdin
    # TODO: handle read errors
    try:
        with open(local_file, 'r') as f:
            data = f.read()
    except (IOError, OSError):
        error('couldn\'t read file \'{0}\''.format(local_file), ERR_OTHER)
    process.communicate(data)
    ret = process.returncode
    if not verbose and ret == 255:
        # ssh error
        error('ssh: couldn\'t log in to the given host', ERR_NET)
    info('return code:', ret)
    return translate_ret(ret)

def help_cmd (cmd = None):
    """Print help on a subcommand."""
    if cmd is None:
        op = mk_op_basic(*COMMANDS)
    elif cmd not in COMMANDS:
        op = mk_op_basic(*COMMANDS)
        op.error('help: invalid command: \'{0}\''.format(cmd))
    else:
        op = mk_op(cmd)
    op.print_help()
    return 0

def translate_ret (ret):
    """Turn some known error codes into ERR_*."""
    if ret == 0:
        return 0
    elif ret == 127: # shell: command not found
        return ERR_EXEC
    elif ret == 255:
        return ERR_NET
    else:
        return ERR_UNKNOWN


def mk_op_basic (*cmds):
    """Initialise an optparse.OptionParser for all of the given commands."""
    # usage has one line per subcommand
    usage = [USAGES[c].format(c) for c in cmds]
    for i in xrange(1, len(usage)):
        usage[i] = ' ' * len('Usage: ') + usage[i]
    usage = '\n'.join(usage)
    # desc is overview if got more than one command, else this command's
    desc = DESCRIPTIONS[cmds[0]] if len(cmds) == 1 else DESCRIPTIONS[None]
    op = optparse.OptionParser(usage = usage, add_help_option = False,
                               description = desc, formatter = Formatter())
    return op

def mk_op (cmd):
    """Make an optparse.OptionParser for the given subcommand."""
    op = mk_op_basic(cmd)
    # create and add options
    if cmd is not None:
        # options to use more than once
        O = optparse.Option
        o_ipython = O('-i', '--ipython', action = 'store', type = 'string',
                      help = 'path to ipython executable (default: %default)')
        o_verbose = O('-v', '--verbose', action = 'count',
                      help = 'print more information')
        o_profile = O('-p', '--profile', action = 'store', type = 'string',
                      help = 'IPython configuration profile on remote ' \
                             'machine to use (default: %default)')
    # subcommand-specific options
    if cmd == 'start':
        op.add_option('-l', '--local-port', action = 'store', type = 'int',
                      help = 'local port to forward the connection to ' \
                             '(default: %default)')
        op.add_option('-r', '--remote-port', action = 'store', type = 'int',
                      help = 'port on the remote machine to run the notebook ' \
                             'on (default: %default)')
        op.add_option('-d', '--directory', action = 'store', type = 'string',
                      help = 'directory to run the notebook server in; may ' \
                             'be relative (default: initial directory)')
        op.add_option(o_ipython)
        op.add_option('-b', '--browser', action = 'store_true',
                      help = 'open the web interface in a web browser')
        op.add_option(o_verbose)
    elif cmd == 'getconf':
        op.add_option(o_profile)
        op.add_option(o_ipython)
        op.add_option(o_verbose)
    elif cmd == 'setconf':
        # NOTE: # engines setting
        op.add_option(o_profile)
        op.add_option('-l', '--local-profile', action = 'store',
                      type = 'string',
                      help = 'IPython configuration profile to use for the ' \
                             'local file (default: %default)')
        op.add_option('-f', '--local-file', action = 'store', type = 'string',
                      help = 'full path to the local version of the ' \
                             'configuration file to transfer')
        op.add_option('-n', '--no-clobber', action = 'store_true',
                      help = 'don\'t overwrite the remote file if it exists')
        op.add_option(o_ipython)
        op.add_option(o_verbose)
    else: # cmd == 'help'
        op.add_option(o_verbose)
    # add newline to description if we have options
    if op.option_list:
        op.description += '\\n\n'
    return op


ERR_EXEC = 1
ERR_ARGS = 2 # optparse uses this
ERR_NET = 3
ERR_OTHER = 4
ERR_UNKNOWN = 5

COMMANDS = ('start', 'getconf', 'setconf', 'help')

USAGES = {
    'start': '%prog {0} [OPTIONS] [--] HOST [IPYTHON_OPTS...]',
    'getconf': '%prog {0} [OPTIONS] HOST COMPONENT',
    'setconf': '%prog {0} [OPTIONS] HOST COMPONENT',
    'help': '%prog {0} SUBCOMMAND'
}

DESCRIPTIONS = {
    None:
'''This script handles running an IPython notebook server on a JASMIN
virtual machine.  All subcommands connect to HOST, which is the host to connect
to as taken by ssh (and so may be of the form username@host).  Make sure your
SSH keys are in place.

When connecting to JASMIN, your shell will be run as a login shell, which means
loading, eg. ~/.bash_profile.  Bear this in mind when passing options such as
those that depend on the working directory.

Bash is required on the virtual machine.  If it cannot be executed as `bash',
the script terminates.

The exit status in the case of an error is:\\n
    1: couldn't execute a command\\n
    2: incorrect arguments\\n
    3: network error (couldn't connect)\\n
    4: any other known error\\n
    5: unknown error

For help with a subcommand, pass `help SUBCOMMAND'.

Subcommands:\\n
    start: start the notebook server.\\n
    getconf: get an IPython configuration file.\\n
    setconf: upload an IPython configuration file.\\n
    help: show this help or the help for another subcommand.''',
    'start':
'''Start the notebook server and forwards the web interface over an SSH
connection to a local port.  IPYTHON_OPTS are any number of extra arguments to
pass to the ipython command, but should not include the --port option.  If any
start with `-', make sure to pass `--' first.''',
    'getconf':
'''Print the contents of the IPython configuration file on the JASMIN virtual
machine for COMPONENT, which is, for example, `ipython_notebook' or
`ipcluster'.  (The file used is COMPONENT_config.py under the directory for the
selected profile.)

Because this command's output is printed, the verbose option only takes effect
if passed twice.  If so, the output is, of course, not a valid IPython
configuration file.''',
    'setconf':
'''Transfer local IPython configuration files to the JASMIN virtual machine for
COMPONENT, which is, for example, `ipython_notebook' or `ipcluster'.  If
--local-file is not passed, the default location is used, for the given
--local-profile.''',
    'help':
'''Get help on subcommand SUBCOMMAND.'''
}

ARGS = {
    'start': ('HOST',),
    'getconf': ('HOST', 'COMPONENT'),
    'setconf': ('HOST', 'COMPONENT'),
    'help': ()
}

VAR_ARGS = {
    'start': None,
    'help': 1
}

DEFAULTS = {
    'global': {
        'verbose': False
    }, 'start': {
        'local_port': 8888,
        'remote_port': 8888,
        'ipython': 'ipython',
        'browser': False
    }, 'getconf': {
        'profile': 'default'
    }, 'setconf': {
        'profile': 'default',
        'local_file': None,
        'no_clobber': False
    }, 'help': {
    }
}

CMD_FNS = {
    'start': start,
    'getconf': getconf,
    'setconf': setconf,
    'help': help_cmd
}

LOUD = ('start',)


if __name__ == '__main__':
    # get subcommand
    if len(argv) >= 2:
        cmd = argv[1]
    else:
        cmd = None
    if cmd not in COMMANDS:
        # no subcommand: print help or error message
        if len(argv) > 2:
            # got other arguments
            cmd = False
        op = mk_op_basic(*COMMANDS)
        if cmd is None or cmd in ('-h', '--help'):
            op.print_help()
            ret = 0
        elif cmd == '--version':
            print op.get_prog_name(), '0.1.0'
            ret = 0
        else:
            # no arguments or unknown subcommand
            prog = op.get_prog_name()
            op.error('expected a subcommand: try `{0} help\''.format(prog))
            ret = ERR_ARGS
    else:
        # got subcommand: parse options
        cmd = argv[1]
        op = mk_op(cmd)
        defaults = dict(DEFAULTS['global'])
        defaults.update(DEFAULTS[cmd])
        op.set_defaults(**defaults)
        options, args = op.parse_args(argv[2:])
        # handle verbose
        global loud
        loud = cmd in LOUD
        global verbose
        verbose = options.verbose
        if verbose == 1 and cmd == 'getconf':
            verbose = 0
        verbose = verbose > 0
        info('received options:', options)
        info('received arguments:', args)
        del options.verbose
        # check positional arguments
        expected_args = ARGS[cmd]
        n_got = len(args)
        for i, arg in enumerate(expected_args):
            if n_got <= i:
                op.error('{0}: expected {1} argument'.format(cmd, arg))
        var = cmd in VAR_ARGS
        n_expected = VAR_ARGS[cmd] if var else None
        var = var and n_expected is None
        if n_expected is None:
            n_expected = len(expected_args)
        if not var and n_got > n_expected:
            msg = '{0}: got too many arguments (expected {1}, got {2})'
            op.error(msg.format(cmd, n_expected, n_got))
        # run subcommand
        f = CMD_FNS[cmd]
        if var:
            args = args[:n_expected] + [args[n_expected:]]
        ret = f(*args, **options.__dict__)
    exit(ret)