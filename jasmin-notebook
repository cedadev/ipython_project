#! /usr/bin/env python

# do version check here, since even imports are version-dependent
import sys

if sys.version_info < (2, 5):
    print 'error: Python version is too low; at least 2.5 is required'
    sys.exit(1)

from sys import exit, argv, stdout, stderr
from signal import signal, SIGINT, SIGTERM
import os
from os.path import join as join_path
from glob import glob
import optparse
from subprocess import Popen, PIPE, STDOUT
from pipes import quote as quote_single
from webbrowser import open as open_url

# TODO:
# - in setconf, if clobbering, don't bother fetching remote list
# - in getconf, can do this and just handle errors through scp?
# - option: run notebook server locally and cluster remotely
#   - or stuff like it - transferring connection files

# utilities

class Formatter (optparse.IndentedHelpFormatter):
    """optparse text formatter to handle multiple description paragraphs."""

    def format_description (self, desc):
        # split by \n\n as if splitting by \n, but don't split by \n
        desc = desc.split('\n\n')
        desc = sum(([s, ''] for s in desc), [])
        if desc:
            desc = desc[:-1]
        # split by \\n\n
        desc = sum((s.split('\\n\n') for s in desc), [])
        # format each split line separately
        result = []
        for s in desc:
            s = optparse.IndentedHelpFormatter.format_description(self, s)
            result.append(s.strip('\n'))
        # join back up
        result = '\n'.join(result)
        return result

def finish (sig, process):
    """Signal handler."""
    process.send_signal(sig)

def printer_head (category):
    """Construct line start used by message printers."""
    if loud:
        return '[%s]' % category.upper()
    else:
        return '%s:' % category.lower()

def error (msg, code, process = None):
    """Print an error message and exit."""
    print >> stderr, printer_head('error'), msg
    if process is not None:
        finish(SIGTERM, process)
        process.wait()
    exit(code)

def mk_printer (category, dest = stderr, need_verbose = False):
    """Create and return a function that prints messages."""
    def printer (*msgs):
        if need_verbose and not verbose:
            return
        print >> dest, printer_head(category),
        for msg in msgs[:-1]:
            print >> dest, msg,
        print >> dest, msgs[-1]
    return printer

info = mk_printer('info', need_verbose = True)
warn = mk_printer('warning')

def quote (args):
    """pipes.quote wrapper to handle lists of args and empty args."""
    if isinstance(args, basestring):
        return quote_single(args) if args else '""'
    else:
        return [quote_single(s) if s else '""' for s in args]

def print_popen_cmd (cmd):
    """Print a list of commands as taken by subprocess.Popen.

The output can be safely run in a shell.

"""
    escaped_cmd = ' '.join(quote(arg) for arg in cmd)
    info('running command:', '[[[ %s ]]]' % escaped_cmd)

# subcommands

def translate_ret (ret, ssh_quiet = False):
    """Turn some known error codes into ERR_*."""
    info('return code:', ret)
    if ret == 0:
        return 0
    elif ret == 127: # shell: command not found
        return ERR_EXEC
    elif ret == 255:
        if verbose and ssh_quiet:
            error('ssh: couldn\'t log in to the given host', ERR_NET)
        else:
            return ERR_NET
    else:
        return ERR_UNKNOWN

def run_ssh (host, cmds, bash_conf, login, ssh_opts = [], *args, **kwargs):
    """Construct a command list for the ssh connection."""
    # order of options is important
    bash_cmd = ['bash']
    if login:
        if not bash_conf:
            bash_cmd.append('--noprofile')
        bash_cmd.append('-l')
    elif bash_conf:
        # kind of weird, but the interactive option enables config file loading
        # and doesn't really make the shell interactive
        bash_cmd.append('-i')
    bash_cmd.append('-c')
    bash_cmd.append(quote(' && '.join(cmds)))
    ssh_cmd = ['ssh'] + ssh_opts + [host, ' '.join(bash_cmd)]
    # run command
    print_popen_cmd(ssh_cmd)
    try:
        process = Popen(ssh_cmd, *args, **kwargs)
    except OSError:
        error('couldn\'t run ssh', ERR_EXEC)
    return process

def check_ssh ():
    """Check local SSH environment for problems."""
    # check for ssh-agent: let ssh-add do the work
    try:
        p = Popen(('ssh-add', '-l'), stdout = PIPE, stderr = STDOUT)
    except OSError:
        warn('couldn\'t run ssh-add')
    else:
        out = p.communicate()[0]
        rtn = p.returncode
        if rtn == 1:
            warn('ssh-agent doesn\'t appear to have any keys')
        elif rtn == 2:
            warn('ssh-agent doesn\'t appear to be running')


def start (host, ipython_args, local_port, remote_port, directory, ipython,
           browser, bash_conf, login):
    """Start the IPython notebook on the VM."""
    check_ssh()
    # construct ipython command
    ipython_cmd = [quote(ipython), 'notebook', '--no-browser']
    ipython_cmd.append('--port=%s' % remote_port)
    ipython_cmd += quote(ipython_args)
    # construct shell commands - make sure to quote input
    if directory is not None:
        cmds = [('cd', quote(directory))]
        if verbose:
            cmds.append('echo [INFO] now in \\"`pwd`\\" 1>&2')
    else:
        cmds = []
    cmds.append(['exec'] + ipython_cmd)
    cmds = [cmd if isinstance(cmd, basestring) else ' '.join(cmd) \
            for cmd in cmds]
    # run
    ssh_opts = ['-t', '-L%s:localhost:%s' % (local_port, remote_port)]
    process = run_ssh(host, cmds, bash_conf, login, ssh_opts, stdout = PIPE,
                      stderr = STDOUT)
    # set up signal handlers
    signal(SIGINT, lambda sig, frame: finish(sig, process))
    signal(SIGTERM, lambda sig, frame: finish(sig, process))
    # look through stdout for a specific printed line
    search_line = '[NotebookApp] The IPython Notebook is running at:'
    err_line = 'channel_setup_fwd_listener: cannot listen to port:'
    success = False
    while True:
        s = process.stdout.readline()
        if len(s) == 0:
            # something went wrong
            break
        if s.startswith(search_line):
            if str(remote_port) + '/' not in s:
                # printed port isn't the one we wanted
                error('couldn\'t set up port forwarding: remote port (%s) ' \
                      'is in use\r' % remote_port, ERR_NET, process)
            else:
                # replace remote with local port
                stdout.write(s.replace(str(remote_port), str(local_port)))
                success = True
                break
        # write line back out
        stdout.write(s)
        if s.startswith(err_line):
            # ssh error
            error('couldn\'t set up port forwarding: local port (%s) is in ' \
                  'use\r' % local_port, ERR_NET, process)
    # open in browser
    if success and browser:
        url = 'http://127.0.0.1:%s/' % local_port
        info('opening browser to %s\r' % url)
        open_url(url)
    # no way to switch output back to stdout, so we need to relay everything
    while True:
        # read one character at a time so that input is echoed immediately
        c = process.stdout.read(1)
        if len(c) == 0:
            # process has finished
            break
        stdout.write(c)
        stdout.flush()
    return translate_ret(process.wait())

def cmd_for_config_file (profile, component = None):
    """Return escaped commands for accessing a configuration file.

Returns a tuple of commands; the first must be executed directly, after which
the second is safe to use as an expression that gives the file path.

"""
    do = 'd="$(ipython locate profile %s)"' % quote(profile)
    if component is None:
        return do
    else:
        return (do, '"$d"/%s_config.py' % quote(component))

def get_listconf (host, profile, ipython, bash_conf = False, login = False):
    """Return a list of IPython configuration files on the VM.

Actually returns exit code if non-zero, else (remote_profile_dir, confs).

"""
    # construct command
    # can't just use ls/grep because their outputs might be customised
    # and to use python over ipython we'd have to ask where it is
    cmds = [cmd_for_config_file(profile),
            '''echo -n "$d" | ipython --quick -c "import os
import sys
d = sys.stdin.read()
try:
    fs = os.listdir(d)
except (IOError, OSError):
    fs = []
print '\\0'.join([d] + [f for f in fs if f.endswith('_config.py')])"''']
    process = run_ssh(host, cmds, bash_conf, login, [] if verbose else ['-q'],
                      stdout = PIPE)
    out = process.communicate()[0]
    ret = process.returncode
    if ret == 0:
        confs = out.strip().split('\0')
        return (confs[0], [f[:-len('_config.py')] for f in confs[1:]])
    else:
        return ret

def listconf (host, profile, ipython, print_zero, bash_conf, login):
    """List IPython configuration files on the VM."""
    check_ssh()
    ret = get_listconf(host, profile, ipython, bash_conf, login)
    if isinstance(ret, int):
        return translate_ret(ret, True)
    else:
        print '\n'.join(ret[1])
        return 0

def get_local_profile_dir (profile, fallback_profile, override_dir):
    """Get the directory of a local IPython profile."""
    if override_dir is None:
        if profile is None:
            profile = fallback_profile
        path = None
        home = os.path.expanduser('~')
        profile_dir = 'profile_' + profile
        for d in (('.ipython',), ('.config', 'ipython')):
            d = join_path(home, *(d + (profile_dir,)))
            if os.path.isdir(d):
                # use this dir
                path = d
                break
        if path is None:
            error('couldn\'t find local profile \'%s\'' % profile, ERR_IO)
    else:
        path = os.path.expanduser(override_dir)
        if not os.path.isdir(path):
            error('directory \'%s\' doesn\'t exist' % path, ERR_IO)
    return path

def get_local_components (profile_dir):
    """Get IPython configuration files in the given directory as components."""
    files = glob(join_path(profile_dir, '*_config.py'))
    return [f[:-len('_config.py')] for f in files]

def filter_existing_components (components, pool, because_exists):
    """Reduce components to a subset of the given pool."""
    cs = set(components)
    components = []
    for c in cs:
        if c not in pool:
            if because_exists:
                warn('skipping component \'%s\': file exists' % c)
            else:
                warn('skipping non-existent component: \'%s\'' % c)
        else:
            components.append(c)
    return components

def mk_host (host, path):
    """Join a host and path, or just return the path if the host is empty."""
    if host:
        return host + ':' + path
    else:
        return path

def component_files (components, profile_dir):
    """Get file paths of components."""
    return [join_path(profile_dir, c + '_config.py') for c in components]

def transfer_components (components, src_host, src_profile_dir, dest_host,
                         dest_profile_dir):
    """Transfer IPython configuration files for the given components."""
    # construct command
    scp_cmd = ['scp']
    if not verbose:
        scp_cmd.append('-q')
    scp_cmd += component_files(components, mk_host(src_host, src_profile_dir))
    scp_cmd.append(mk_host(dest_host, dest_profile_dir))
    # run command
    print_popen_cmd(scp_cmd)
    try:
        process = Popen(scp_cmd)
    except OSError:
        error('couldn\'t run scp', ERR_EXEC)
    return translate_ret(process.wait())

def getconf (host, component, components, profile, local_profile, directory,
             no_clobber, ipython, bash_conf, login):
    """Get IPython configuration files from the VM."""
    check_ssh()
    components.insert(0, component)
    # get existing components
    l_profile_dir = get_local_profile_dir(local_profile, profile, directory)
    l_components = get_local_components(l_profile_dir)
    ret = get_listconf(host, profile, ipython, bash_conf, login)
    if isinstance(ret, int):
        # got an error
        return translate_ret(ret, True)
    r_profile_dir, r_components = ret
    if '*' in components:
        components = r_components
    else:
        # check given components exist
        components = filter_existing_components(components, r_components,
                                                False)
    if no_clobber:
        components = filter_existing_components(components, l_components, True)
    info('getting components:', components)
    if not components:
        return 0
    # run
    return transfer_components(components, host, r_profile_dir, None,
                               l_profile_dir)

def setconf (host, component, components, profile, local_profile, directory,
             no_clobber, ipython, bash_conf, login):
    """Upload IPython configuration files to the VM."""
    check_ssh()
    components.insert(0, component)
    # get existing components
    l_profile_dir = get_local_profile_dir(local_profile, profile, directory)
    l_components = get_local_components(l_profile_dir)
    ret = get_listconf(host, profile, ipython, bash_conf, login)
    if isinstance(ret, int):
        # got an error
        return translate_ret(ret, True)
    r_profile_dir, r_components = ret
    if '*' in components:
        components = l_components
    else:
        # check given components exist
        components = filter_existing_components(components, l_components,
                                                False)
    if no_clobber:
        components = filter_existing_components(components, r_components, True)
    info('getting components:', components)
    if not components:
        return 0
    # run
    return transfer_components(components, None, l_profile_dir, host,
                               r_profile_dir)

def createconf (host, profile, reset, no_parallel, ipython, bash_conf, login):
    """Create IPython configuration files on the VM."""
    check_ssh()
    # construct command
    cmd = ['ipython profile create', quote(profile)]
    if reset:
        cmd.append('--reset')
    if not no_parallel:
        cmd.append('--parallel')
    process = run_ssh(host, (' '.join(cmd),), bash_conf, login,
                      [] if verbose else ['-q'])
    return translate_ret(process.wait(), True)

def help_cmd (cmd = None):
    """Print help on a subcommand."""
    if cmd is None:
        op = mk_op_basic(*SUBCOMMANDS)
    elif cmd not in SUBCOMMANDS:
        op = mk_op_basic(*SUBCOMMANDS)
        op.error('help: invalid subcommand: \'%s\'' % cmd)
    else:
        op = mk_op(cmd)
    op.print_help()
    return 0

# option parser constructors

def mk_op_basic (*cmds):
    """Initialise an optparse.OptionParser for all of the given commands."""
    # usage has one line per subcommand
    usage = [USAGES[c] for c in cmds]
    for i in xrange(1, len(usage)):
        usage[i] = ' ' * len('Usage: ') + usage[i]
    usage = '\n'.join(usage)
    # desc is overview if got more than one command, else this command's
    desc = DESCRIPTIONS[cmds[0]] if len(cmds) == 1 else DESCRIPTIONS[None]
    op = optparse.OptionParser(usage = usage, add_help_option = False,
                               description = desc, formatter = Formatter())
    # set defaults: start with global defaults
    defaults = dict(DEFAULTS[None])
    # get defaults for every group involved
    for cmd in cmds:
        for g in GROUPS[cmd]:
            defaults.update(DEFAULTS[g])
        defaults.update(DEFAULTS[cmd])
    # and then those for subcommand-specific options
    for cmd in cmds:
        op.set_defaults(**defaults)
    return op

def mk_op (cmd):
    """Make an optparse.OptionParser for the given subcommand."""
    op = mk_op_basic(cmd)
    groups = GROUPS[cmd]
    # create and add options
    # options to use more than once (automated adding of these would be nice,
    # but order is important)
    O = optparse.Option
    o_verbose = O('-v', '--verbose', action = 'store_true',
                  help = 'print more information')
    if 'remote' in groups:
        o_ipython = O('-i', '--ipython', action = 'store', type = 'string',
                      help = 'path to ipython executable on the remote ' \
                             'machine (default: %default)')
        o_bash_conf = O('-c', '--bash-conf', action = 'store_true',
                        help = 'when running bash on the virtual machine, ' \
                               'source its configuration files (not done by ' \
                               'default)')
        o_login = O('-g', '--login', action = 'store_true',
                    help = 'run bash on the virtual machine as a login ' \
                           'shell; this causes different files to be ' \
                           'sourced (not done by default)')
    if 'conf' in groups:
        o_profile = O('-p', '--profile', action = 'store', type = 'string',
                      help = 'IPython configuration profile on remote ' \
                             'machine to use (default: %default)')
    if 'transfer' in groups:
        o_local_profile = O('-l', '--local-profile', action = 'store',
                            type = 'string',
                            help = 'local IPython configuration profile to ' \
                                   'use; ignored if --directory is given ' \
                                   '(defaults to PROFILE)')
        o_directory = O('-d', '--directory', action = 'store', type = 'string',
                        help = 'local directory to use for configuration ' \
                               'files, instead of the IPython profile')
        o_no_clobber = O('-n', '--no-clobber', action = 'store_true',
                         help = 'don\'t overwrite files if they exist')
    # subcommand-specific options
    if cmd == 'start':
        op.add_option('-l', '--local-port', action = 'store', type = 'int',
                      help = 'local port to forward the connection to ' \
                             '(default: %default)')
        op.add_option('-r', '--remote-port', action = 'store', type = 'int',
                      help = 'port on the remote machine to run the notebook ' \
                             'on (default: %default)')
        op.add_option('-d', '--directory', action = 'store', type = 'string',
                      help = 'directory to run the notebook server in; may ' \
                             'be relative (default: initial directory)')
        op.add_option(o_ipython)
        op.add_option('-b', '--browser', action = 'store_true',
                      help = 'open the web interface in a web browser')
        op.add_options((o_bash_conf, o_login, o_verbose))
    elif cmd == 'listconf':
        op.add_options((o_profile, o_ipython))
        op.add_option('-z', '--print-zero', action = 'store_true',
                      help = 'separate listed files by null bytes instead ' \
                             'of newlines')
        op.add_options((o_bash_conf, o_login, o_verbose))
    elif cmd == 'getconf':
        op.add_options((o_profile, o_local_profile, o_directory, o_no_clobber,
                        o_ipython, o_bash_conf, o_login, o_verbose))
    elif cmd == 'setconf':
        op.add_options((o_profile, o_local_profile, o_directory, o_no_clobber,
                        o_ipython, o_bash_conf, o_login, o_verbose))
    elif cmd == 'createconf':
        op.add_option(o_profile)
        op.add_option('-r', '--reset', action = 'store_true',
                      help = 'overwrite existing configuration files')
        op.add_option('-n', '--no-parallel', action = 'store_true',
                      help = 'don\'t create configuration files for ' \
                             'parallel computing components of IPython')
        op.add_options((o_ipython, o_bash_conf, o_login, o_verbose))
    else: # cmd == 'help'
        op.add_option(o_verbose)
    # add newline to description if we have options
    if op.option_list:
        op.description += '\\n\n'
    return op

# subcommand configuration

ERR_EXEC = 1
ERR_ARGS = 2 # optparse uses this
ERR_NET = 3
ERR_IO = 4
ERR_UNKNOWN = 5

SUBCOMMANDS = ('start', 'listconf', 'getconf', 'setconf', 'createconf', 'help')

USAGES = {
    'start': '%prog start [OPTIONS] [--] HOST [IPYTHON_OPTS...]',
    'listconf': '%prog listconf [OPTIONS] HOST',
    'getconf': '%prog getconf [OPTIONS] HOST COMPONENT [COMPONENTS...]',
    'setconf': '%prog setconf [OPTIONS] HOST COMPONENT [COMPONENTS...]',
    'createconf': '%prog createconf [OPTIONS] HOST',
    'help': '%prog help SUBCOMMAND'
}

component_desc = '''is, for example, `ipython_notebook' or `ipcluster'.  (The
file used is COMPONENT_config.py under the directory for the selected
profile.)'''

DESCRIPTIONS = {
    None:
'''This script handles running an IPython notebook server on a JASMIN
virtual machine.  All subcommands connect to HOST, which is the host to connect
to as taken by ssh (and so may be of the form username@host).  Make sure your
SSH keys are in place.

When connecting to JASMIN, your shell will be run as a non-login shell, which
means loading, eg. ~/.bashrc.  Bear in mind the effect this may have on
executing bash (which may or may not source some configuration files, depending
on the options given).

when passing options such as
those that depend on the working directory.

Bash is required on the virtual machine.  If it cannot be executed as `bash',
the script terminates.

The exit status in the case of an error is:\\n
    1: couldn't execute a command\\n
    2: incorrect arguments\\n
    3: network error\\n
    4: local I/O error\\n
    5: unknown error

For help with a subcommand, pass `help SUBCOMMAND'.''',
    'start':
'''Start the notebook server and forward the web interface over an SSH
connection to a local port.  IPYTHON_OPTS are any number of extra arguments to
pass to the ipython command, but should not include the --port option.  If any
start with `-', make sure to pass `--' first.''',
    'listconf':
'''List IPython configuration files present on the JASMIN virtual machine.
These are in the form of COMPONENT, which %s''' % component_desc,
    'getconf':
'''Retrieve one or more IPython configuration files on the JASMIN virtual
machine for each COMPONENT, which %s

A COMPONENT can also be `*' to get all remote configuration files for the given
profile.  Note that your shell may expand `*', so you may need to escape it
(`\*' or `"*"').''' % component_desc,
    'setconf':
'''Transfer local IPython configuration files to the JASMIN virtual machine for
each COMPONENT, which %s

A COMPONENT can also be `*' to upload all local configuration files for the
given profile.  Note that your shell may expand `*', so you may need to escape
it (`\*' or `"*"').''' % component_desc,
    'createconf':
'''Create a default set of IPython configuration files on the JASMIN virtual
machine.''',
    'help':
'''Get help on subcommand SUBCOMMAND.'''
}

SHORT_DESCS = ( # order is important
    ('start', 'start the notebook server'),
    ('listconf', 'list IPython configuration files'),
    ('getconf', 'get IPython configuration files'),
    ('setconf', 'upload IPython configuration files'),
    ('createconf', 'create default IPython configuration files'),
    ('help', 'show this help or the help for another subcommand')
)

ARGS = {
    'start': ('HOST',),
    'listconf': ('HOST',),
    'getconf': ('HOST', 'COMPONENT'),
    'setconf': ('HOST', 'COMPONENT'),
    'createconf': ('HOST',),
    'help': ()
}

VAR_ARGS = {
    'start': None,
    'getconf': None,
    'setconf': None,
    'help': 1
}

GROUPS = {
    'start': ('remote',),
    'listconf': ('remote', 'conf'),
    'getconf': ('remote', 'conf', 'transfer'),
    'setconf': ('remote', 'conf', 'transfer'),
    'createconf': ('remote', 'conf'),
    'help': ()
}

DEFAULTS = {
    None: {
        'verbose': False,
    }, 'remote': {
        'ipython': 'ipython',
        'login': False,
        'bash_conf': False
    }, 'conf': {
        'profile': 'default'
    }, 'transfer': {
        'no_clobber': False
    }, 'start': {
        'local_port': 8888,
        'remote_port': 8888,
        'browser': False
    }, 'listconf': {
        'print_zero': False,
    }, 'getconf': {
    }, 'setconf': {
    }, 'createconf': {
        'reset': False,
        'no_parallel': False
    }, 'help': {
    }
}

CMD_FNS = {
    'start': start,
    'listconf': listconf,
    'getconf': getconf,
    'setconf': setconf,
    'createconf': createconf,
    'help': help_cmd
}

LOUD = ('start',)

# add summaries to main help
descs = ['%s: %s.' % (name, desc) for name, desc in SHORT_DESCS]
DESCRIPTIONS[None] += '\n\n' + '\\n\n    '.join(['Subcommands:'] + descs)

# entry point

if __name__ == '__main__':
    # get subcommand
    if len(argv) >= 2:
        cmd = argv[1]
    else:
        cmd = None
    if cmd not in SUBCOMMANDS:
        # no subcommand: print help or error message
        if len(argv) > 2:
            # got other arguments
            cmd = False
        op = mk_op_basic(*SUBCOMMANDS)
        if cmd is None or cmd in ('-h', '--help'):
            op.print_help()
            ret = 0
        elif cmd == '--version':
            print op.get_prog_name(), '0.1.0'
            ret = 0
        else:
            # no arguments or unknown subcommand
            prog = op.get_prog_name()
            op.error('expected a subcommand: try `%s help\'' % prog)
            ret = ERR_ARGS
    else:
        # got subcommand: parse options
        cmd = argv[1]
        op = mk_op(cmd)
        options, args = op.parse_args(argv[2:])
        # handle verbose
        global verbose
        verbose = options.verbose
        global loud
        loud = cmd in LOUD or verbose
        info('received options:', options)
        info('received arguments:', args)
        del options.verbose
        # check positional arguments
        expected_args = ARGS[cmd]
        n_got = len(args)
        for i, arg in enumerate(expected_args):
            if n_got <= i:
                op.error('%s: expected %s argument' % (cmd, arg))
        var = cmd in VAR_ARGS
        n_expected = VAR_ARGS[cmd] if var else None
        var = var and n_expected is None
        if n_expected is None:
            n_expected = len(expected_args)
        if not var and n_got > n_expected:
            msg = '%s: got too many arguments (expected %s, got %s)'
            op.error(msg % (cmd, n_expected, n_got))
        # run subcommand
        f = CMD_FNS[cmd]
        if var:
            args = args[:n_expected] + [args[n_expected:]]
        ret = f(*args, **options.__dict__)
    exit(ret)