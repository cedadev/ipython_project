#! /usr/bin/env python

# do version check here, since even imports are version-dependent
import sys

if sys.version_info < (2, 5):
    print 'error: Python version is too low; at least 2.5 is required'
    sys.exit(1)

from sys import exit, argv, stdout, stderr
from signal import signal, SIGINT, SIGTERM
import os
from os.path import join as join_path
import optparse
from subprocess import Popen, PIPE, STDOUT
from pipes import quote as quote_single
from webbrowser import open as open_url

# TODO:
# - getconf and setconf can take * as component to do for all
#   - note only makes sense for getconf if writing to file
#   - note need to escape * in shell
#   - note if given, setconf's --local-file ignored
# - option: run notebook server locally and cluster remotely
#   - or stuff like it - transferring connection files
# - why are the '\r's needed?

# utilities

class Formatter (optparse.IndentedHelpFormatter):
    """optparse text formatter to handle multiple description paragraphs."""

    def format_description (self, desc):
        # split by \n\n as if splitting by \n, but don't split by \n
        desc = desc.split('\n\n')
        desc = sum(([s, ''] for s in desc), [])
        if desc:
            desc = desc[:-1]
        # split by \\n\n
        desc = sum((s.split('\\n\n') for s in desc), [])
        # format each split line separately
        result = []
        for s in desc:
            s = optparse.IndentedHelpFormatter.format_description(self, s)
            result.append(s.strip('\n'))
        # join back up
        result = '\n'.join(result)
        return result

def finish (sig, process):
    """Signal handler."""
    process.send_signal(sig)

def printer_head (category):
    """Construct line start used by message printers."""
    if loud:
        return '[%s]' % category.upper()
    else:
        return '%s:' % category.lower()

def error (msg, code, process = None):
    """Print an error message and exit."""
    print >> stderr, printer_head('error'), msg
    if process is not None:
        finish(SIGTERM, process)
        process.wait()
    exit(code)

def mk_printer (category, dest = stderr, need_verbose = False):
    """Create and return a function that prints messages."""
    def printer (*msgs):
        if need_verbose and not verbose:
            return
        print >> dest, printer_head(category),
        for msg in msgs[:-1]:
            print >> dest, msg,
        print >> dest, msgs[-1]
    return printer

info = mk_printer('info', need_verbose = True)
warn = mk_printer('warning')

def quote (args):
    """pipes.quote wrapper to handle lists of args and empty args."""
    if isinstance(args, basestring):
        return quote_single(args) if args else '""'
    else:
        return [quote_single(s) if s else '""' for s in args]

def print_popen_cmd (cmd):
    """Print a list of commands as taken by subprocess.Popen.

The output can be safely run in a shell.

"""
    escaped_cmd = ' '.join(quote(arg) for arg in cmd)
    info('running command:', '[[[ %s ]]]' % escaped_cmd)

# subcommands

def translate_ret (ret):
    """Turn some known error codes into ERR_*."""
    if ret == 0:
        return 0
    elif ret == 127: # shell: command not found
        return ERR_EXEC
    elif ret == 255:
        return ERR_NET
    else:
        return ERR_UNKNOWN

def mk_ssh_cmd (host, cmds, bash_conf, login, ssh_opts = []):
    """Construct a command list for the ssh connection."""
    # order of options is important
    bash_cmd = ['bash']
    if login:
        if not bash_conf:
            bash_cmd.append('--noprofile')
        bash_cmd.append('-l')
    elif bash_conf:
        # kind of weird, but the interactive option enables config file loading
        # and doesn't really make the shell interactive
        bash_cmd.append('-i')
    bash_cmd.append('-c')
    bash_cmd.append(quote(' && '.join(cmds)))
    return ['ssh'] + ssh_opts + [host, ' '.join(bash_cmd)]

def check_ssh ():
    """Check local SSH environment for problems."""
    # check for ssh-agent: let ssh-add do the work
    try:
        p = Popen(('ssh-add', '-l'), stdout = PIPE, stderr = STDOUT)
    except OSError:
        warn('couldn\'t run ssh-add')
    else:
        out = p.communicate()[0]
        rtn = p.returncode
        if rtn == 1:
            warn('ssh-agent doesn\'t appear to have any keys')
        elif rtn == 2:
            warn('ssh-agent doesn\'t appear to be running')


def start (host, ipython_args, local_port, remote_port, directory, ipython,
           browser, bash_conf, login):
    """Start the IPython notebook on the VM."""
    check_ssh()
    # construct ipython command
    ipython_cmd = [quote(ipython), 'notebook', '--no-browser']
    ipython_cmd.append('--port=%s' % remote_port)
    ipython_cmd += quote(ipython_args)
    # construct shell commands - make sure to quote input
    if directory is not None:
        cmds = [('cd', quote(directory))]
        if verbose:
            cmds.append('echo [INFO] now in \\"`pwd`\\"')
    else:
        cmds = []
    cmds.append(['exec'] + ipython_cmd)
    cmds = [cmd if isinstance(cmd, basestring) else ' '.join(cmd) \
            for cmd in cmds]
    # construct ssh command
    ssh_opts = ['-t', '-L%s:localhost:%s' % (local_port, remote_port)]
    ssh_cmd = mk_ssh_cmd(host, cmds, bash_conf, login, ssh_opts)
    # run command
    print_popen_cmd(ssh_cmd)
    try:
        process = Popen(ssh_cmd, stdout = PIPE, stderr = STDOUT)
    except OSError:
        error('couldn\'t run ssh', ERR_EXEC)
    # set up signal handlers
    signal(SIGINT, lambda sig, frame: finish(sig, process))
    signal(SIGTERM, lambda sig, frame: finish(sig, process))
    # look through stdout for a specific printed line
    search_line = '[NotebookApp] The IPython Notebook is running at:'
    err_line = 'channel_setup_fwd_listener: cannot listen to port:'
    success = False
    while True:
        s = process.stdout.readline()
        if len(s) == 0:
            # something went wrong
            break
        if s.startswith(search_line):
            if str(remote_port) + '/' not in s:
                # printed port isn't the one we wanted
                error('couldn\'t set up port forwarding: remote port (%s) ' \
                      'is in use\r' % remote_port, ERR_NET, process)
            else:
                # replace remote with local port
                stdout.write(s.replace(str(remote_port), str(local_port)))
                success = True
                break
        # write line back out
        stdout.write(s)
        if s.startswith(err_line):
            # ssh error
            error('couldn\'t set up port forwarding: local port (%s) is in ' \
                  'use\r' % local_port, ERR_NET, process)
    # open in browser
    if success and browser:
        url = 'http://127.0.0.1:%s/' % local_port
        info('opening browser to %s\r' % url)
        open_url(url)
    # no way to switch output back to stdout, so we need to relay everything
    while True:
        # read one character at a time so that input is echoed immediately
        c = process.stdout.read(1)
        if len(c) == 0:
            # process has finished
            break
        stdout.write(c)
        stdout.flush()
    ret = process.wait()
    info('return code:', ret)
    return translate_ret(ret)

def cmd_for_config_file (profile, component = None):
    """Return escaped commands for accessing a configuration file.

Returns a tuple of commands; the first must be executed directly, after which
the second is safe to use as an expression that gives the file path.

"""
    do = 'd="$(ipython locate profile %s)"' % quote(profile)
    if component is None:
        return do
    else:
        return (do, '"$d"/%s_config.py' % quote(component))

def listconf (host, profile, ipython, print_zero, bash_conf, login):
    """List IPython configuration files on the VM."""
    check_ssh()
    # construct command
    # can't just use ls/grep because their outputs might be customised
    # and to use python over ipython we'd have to ask where it is
    cmds = [cmd_for_config_file(profile),
            '''echo -n "$d" | ipython --quick -c "import os
import sys
try:
    fs = os.listdir(sys.stdin.read())
except (IOError, OSError):
    fs = []
fs = [f[:-len('_config.py')] for f in fs if f.endswith('_config.py')]
print '%s'.join(fs)"''' % ('\\0' if print_zero else '\\n')]
    ssh_cmd = mk_ssh_cmd(host, cmds, bash_conf, login,
                         [] if verbose else ['-q'])
    # run command
    print_popen_cmd(ssh_cmd)
    try:
        process = Popen(ssh_cmd)
    except OSError:
        error('couldn\'t run ssh', ERR_EXEC)
    ret = process.wait()
    if not verbose and ret == 255:
        # ssh error
        error('ssh: couldn\'t log in to the given host', ERR_NET)
    info('return code:', ret)
    return translate_ret(ret)

def get_local_profile (profile):
    """Get a list of possible directories the given profile could be in."""
    home = os.path.expanduser('~')
    profile_dir = 'profile_' + profile
    ds = []
    for d in (('.ipython',), ('.config', 'ipython')):
        ds.append(join_path(*((home,) + d + (profile_dir,))))
    return ds

def getconf (host, component, profile, save, local_profile, no_clobber,
             ipython, bash_conf, login):
    """Get an IPython configuration file from the VM."""
    check_ssh()
    # find file to save to
    if save:
        if local_profile is None:
            local_profile = profile
        profile_dir = None
        for d in get_local_profile(local_profile):
            if os.path.isdir(d):
                # use this dir
                profile_dir = d
                break
        if profile_dir is None:
            msg = 'couldn\'t find local profile \'%s\''
            error(msg % local_profile, ERR_IO)
        fn = os.path.join(profile_dir, component + '_config.py')
    # construct command
    do, f = cmd_for_config_file(profile, component)
    cmds = (do, 'cat %s' % f)
    ssh_cmd = mk_ssh_cmd(host, cmds, bash_conf, login,
                         [] if verbose else ['-q'])
    # run command
    print_popen_cmd(ssh_cmd)
    try:
        process = Popen(ssh_cmd, stdout = PIPE if save else None)
    except OSError:
        error('couldn\'t run ssh', ERR_EXEC)
    out = process.communicate()[0]
    # write to file
    if save:
        if no_clobber and os.path.exists(fn):
            warn('not writing to existing file \'%s\'' % fn)
        else:
            try:
                f = open(fn, 'w')
            except (OSError, IOError):
                error('couldn\'t write to file \'%s\'' % fn, ERR_IO)
            else:
                f.write(out)
            finally:
                f.close()
    ret = process.returncode
    if not verbose and ret == 255:
        # ssh error
        error('ssh: couldn\'t log in to the given host', ERR_NET)
    info('return code:', ret)
    return translate_ret(ret)

def setconf (host, component, profile, local_profile, local_file, no_clobber,
             ipython, bash_conf, login):
    """Upload an IPython configuration file to the VM."""
    check_ssh()
    # find local file
    if local_file is None:
        if local_profile is None:
            local_profile = profile
        # try known dirs
        file_name = component + '_config.py'
        for d in get_local_profile(local_profile):
            f = join_path(d, file_name)
            if os.path.isfile(f):
                local_file = f
                break
        if local_file is None:
            # didn't find anything
            msg = 'couldn\'t find local file \'%s\' under profile \'%s\''
            error(msg % (file_name, local_profile), ERR_IO)
    # construct command
    cmds = []
    if no_clobber:
        cmds.append('set -o noclobber') # assuming Bash
    do, f = cmd_for_config_file(profile, component)
    cmds.append(do)
    cmds.append('tee > %s' % f)
    ssh_cmd = mk_ssh_cmd(host, cmds, bash_conf, login,
                         [] if verbose else ['-q'])
    # run command
    print_popen_cmd(ssh_cmd)
    try:
        process = Popen(ssh_cmd, stdin = PIPE)
    except OSError:
        error('couldn\'t run ssh', ERR_EXEC)
    # pass config file on stdin
    try:
        f = open(local_file, 'r')
    except (IOError, OSError):
        error('couldn\'t read local file \'%s\'' % local_file, ERR_IO)
    else:
        data = f.read()
    finally:
        f.close()
    process.communicate(data)
    ret = process.returncode
    if not verbose and ret == 255:
        # ssh error
        error('ssh: couldn\'t log in to the given host', ERR_NET)
    info('return code:', ret)
    return translate_ret(ret)

def createconf (host, profile, reset, no_parallel, ipython, bash_conf, login):
    """Create IPython configuration files on the VM."""
    check_ssh()
    # construct command
    cmd = ['ipython profile create', quote(profile)]
    if reset:
        cmd.append('--reset')
    if not no_parallel:
        cmd.append('--parallel')
    ssh_cmd = mk_ssh_cmd(host, (' '.join(cmd),), bash_conf, login,
                         [] if verbose else ['-q'])
    # run command
    print_popen_cmd(ssh_cmd)
    try:
        process = Popen(ssh_cmd)
    except OSError:
        error('couldn\'t run ssh', ERR_EXEC)
    ret = process.wait()
    if not verbose and ret == 255:
        # ssh error
        error('ssh: couldn\'t log in to the given host', ERR_NET)
    info('return code:', ret)
    return translate_ret(ret)

def help_cmd (cmd = None):
    """Print help on a subcommand."""
    if cmd is None:
        op = mk_op_basic(*SUBCOMMANDS)
    elif cmd not in SUBCOMMANDS:
        op = mk_op_basic(*SUBCOMMANDS)
        op.error('help: invalid subcommand: \'%s\'' % cmd)
    else:
        op = mk_op(cmd)
    op.print_help()
    return 0

# option parser constructors

def mk_op_basic (*cmds):
    """Initialise an optparse.OptionParser for all of the given commands."""
    # usage has one line per subcommand
    usage = [USAGES[c] for c in cmds]
    for i in xrange(1, len(usage)):
        usage[i] = ' ' * len('Usage: ') + usage[i]
    usage = '\n'.join(usage)
    # desc is overview if got more than one command, else this command's
    desc = DESCRIPTIONS[cmds[0]] if len(cmds) == 1 else DESCRIPTIONS[None]
    op = optparse.OptionParser(usage = usage, add_help_option = False,
                               description = desc, formatter = Formatter())
    # set defaults: start with global defaults
    defaults = dict(DEFAULTS[None])
    # get defaults for every group involved
    for cmd in cmds:
        for g in GROUPS[cmd]:
            defaults.update(DEFAULTS[g])
        defaults.update(DEFAULTS[cmd])
    # and then those for subcommand-specific options
    for cmd in cmds:
        op.set_defaults(**defaults)
    return op

def mk_op (cmd):
    """Make an optparse.OptionParser for the given subcommand."""
    op = mk_op_basic(cmd)
    groups = GROUPS[cmd]
    # create and add options
    # options to use more than once (automated adding of these would be nice,
    # but order is important)
    O = optparse.Option
    o_verbose = O('-v', '--verbose', action = 'store_true',
                  help = 'print more information')
    if 'remote' in groups:
        o_ipython = O('-i', '--ipython', action = 'store', type = 'string',
                      help = 'path to ipython executable on the remote ' \
                             'machine (default: %default)')
        o_bash_conf = O('-c', '--bash-conf', action = 'store_true',
                        help = 'when running bash on the virtual machine, ' \
                               'source its configuration files (not done by ' \
                               'default)')
        o_login = O('-g', '--login', action = 'store_true',
                    help = 'run bash on the virtual machine as a login ' \
                           'shell; this causes different files to be sourced')
    if 'conf' in groups:
        o_profile = O('-p', '--profile', action = 'store', type = 'string',
                      help = 'IPython configuration profile on remote ' \
                             'machine to use (default: %default)')
    # subcommand-specific options
    if cmd == 'start':
        op.add_option('-l', '--local-port', action = 'store', type = 'int',
                      help = 'local port to forward the connection to ' \
                             '(default: %default)')
        op.add_option('-r', '--remote-port', action = 'store', type = 'int',
                      help = 'port on the remote machine to run the notebook ' \
                             'on (default: %default)')
        op.add_option('-d', '--directory', action = 'store', type = 'string',
                      help = 'directory to run the notebook server in; may ' \
                             'be relative (default: initial directory)')
        op.add_option(o_ipython)
        op.add_option('-b', '--browser', action = 'store_true',
                      help = 'open the web interface in a web browser')
        op.add_options((o_bash_conf, o_login, o_verbose))
    elif cmd == 'listconf':
        op.add_options((o_profile, o_ipython))
        op.add_option('-z', '--print-zero', action = 'store_true',
                      help = 'separate listed files by null bytes instead ' \
                             'of newlines')
        op.add_options((o_bash_conf, o_login, o_verbose))
    elif cmd == 'getconf':
        op.add_options((o_profile,))
        op.add_option('-s', '--save', action = 'store_true',
                      help = 'save the output to the local configuration ' \
                             'file, instead of printing it')
        op.add_option('-l', '--local-profile', action = 'store',
                      type = 'string',
                      help = 'local IPython configuration profile to use ' \
                             'with --save (defaults to PROFILE)')
        op.add_option('-n', '--no-clobber', action = 'store_true',
                      help = 'with --save, don\'t overwrite the local file ' \
                             'if it exists ')
        op.add_options((o_ipython, o_bash_conf, o_login, o_verbose))
    elif cmd == 'setconf':
        op.add_option(o_profile)
        op.add_option('-l', '--local-profile', action = 'store',
                      type = 'string',
                      help = 'local IPython configuration profile to look ' \
                             'in for the file to transfer; ignored if ' \
                             '--local-file is given (defaults to PROFILE)')
        op.add_option('-f', '--local-file', action = 'store', type = 'string',
                      help = 'full path to the local version of the ' \
                             'configuration file to transfer')
        op.add_option('-n', '--no-clobber', action = 'store_true',
                      help = 'don\'t overwrite the remote file if it exists')
        op.add_options((o_ipython, o_bash_conf, o_login, o_verbose))
    elif cmd == 'createconf':
        op.add_option(o_profile)
        op.add_option('-r', '--reset', action = 'store_true',
                      help = 'overwrite existing configuration files')
        op.add_option('-n', '--no-parallel', action = 'store_true',
                      help = 'don\'t create configuration files for ' \
                             'parallel computing components of IPython')
        op.add_options((o_ipython, o_bash_conf, o_login, o_verbose))
    else: # cmd == 'help'
        op.add_option(o_verbose)
    # add newline to description if we have options
    if op.option_list:
        op.description += '\\n\n'
    return op

# subcommand configuration

ERR_EXEC = 1
ERR_ARGS = 2 # optparse uses this
ERR_NET = 3
ERR_IO = 4
ERR_UNKNOWN = 5

SUBCOMMANDS = ('start', 'listconf', 'getconf', 'setconf', 'createconf', 'help')

USAGES = {
    'start': '%prog start [OPTIONS] [--] HOST [IPYTHON_OPTS...]',
    'listconf': '%prog listconf [OPTIONS] HOST',
    'getconf': '%prog getconf [OPTIONS] HOST COMPONENT',
    'setconf': '%prog setconf [OPTIONS] HOST COMPONENT',
    'createconf': '%prog createconf [OPTIONS] HOST',
    'help': '%prog help SUBCOMMAND'
}

component_desc = '''COMPONENT, which is, for example, `ipython_notebook' or
`ipcluster'.  (The file used is COMPONENT_config.py under the directory for the
selected profile.)'''

DESCRIPTIONS = {
    None:
'''This script handles running an IPython notebook server on a JASMIN
virtual machine.  All subcommands connect to HOST, which is the host to connect
to as taken by ssh (and so may be of the form username@host).  Make sure your
SSH keys are in place.

When connecting to JASMIN, your shell will be run as a non-login shell, which
means loading, eg. ~/.bashrc.  Bear in mind the effect this may have on
executing bash (which may or may not source some configuration files, depending
on the options given).

when passing options such as
those that depend on the working directory.

Bash is required on the virtual machine.  If it cannot be executed as `bash',
the script terminates.

The exit status in the case of an error is:\\n
    1: couldn't execute a command\\n
    2: incorrect arguments\\n
    3: network error\\n
    4: local I/O error\\n
    5: unknown error

For help with a subcommand, pass `help SUBCOMMAND'.''',
    'start':
'''Start the notebook server and forward the web interface over an SSH
connection to a local port.  IPYTHON_OPTS are any number of extra arguments to
pass to the ipython command, but should not include the --port option.  If any
start with `-', make sure to pass `--' first.''',
    'listconf':
'''List IPython configuration files present on the JASMIN virtual machine.
These are in the form of %s''' % component_desc,
    'getconf':
'''Print the contents of the IPython configuration file on the JASMIN virtual
machine for %s

Any extra output caused by the verbose option should be sent to stderr, but
this is not guaranteed, and in this case the output may not be a valid IPython
configuration file.''' % component_desc,
    'setconf':
'''Transfer local IPython configuration files to the JASMIN virtual machine for
%s''' % component_desc,
    'createconf':
'''Create a default set of IPython configuration files on the JASMIN virtual
machine.''',
    'help':
'''Get help on subcommand SUBCOMMAND.'''
}

SHORT_DESCS = ( # order is important
    ('start', 'start the notebook server'),
    ('listconf', 'list IPython configuration files'),
    ('getconf', 'get an IPython configuration file'),
    ('setconf', 'upload an IPython configuration file'),
    ('createconf', 'create default IPython configuration files'),
    ('help', 'show this help or the help for another subcommand')
)

ARGS = {
    'start': ('HOST',),
    'listconf': ('HOST',),
    'getconf': ('HOST', 'COMPONENT'),
    'setconf': ('HOST', 'COMPONENT'),
    'createconf': ('HOST',),
    'help': ()
}

VAR_ARGS = {
    'start': None,
    'help': 1
}

GROUPS = {
    'start': ('remote',),
    'listconf': ('remote', 'conf'),
    'getconf': ('remote', 'conf'),
    'setconf': ('remote', 'conf'),
    'createconf': ('remote', 'conf'),
    'help': ()
}

DEFAULTS = {
    None: {
        'verbose': False,
    }, 'remote': {
        'ipython': 'ipython',
        'login': False,
        'bash_conf': False
    }, 'conf': {
        'profile': 'default'
    }, 'start': {
        'local_port': 8888,
        'remote_port': 8888,
        'browser': False
    }, 'listconf': {
        'print_zero': False,
    }, 'getconf': {
        'save': False,
        'no_clobber': False
    }, 'setconf': {
        'no_clobber': False
    }, 'createconf': {
        'reset': False,
        'no_parallel': False
    }, 'help': {
    }
}

CMD_FNS = {
    'start': start,
    'listconf': listconf,
    'getconf': getconf,
    'setconf': setconf,
    'createconf': createconf,
    'help': help_cmd
}

LOUD = ('start',)

# add summaries to main help
descs = ['%s: %s.' % (name, desc) for name, desc in SHORT_DESCS]
DESCRIPTIONS[None] += '\n\n' + '\\n\n    '.join(['Subcommands:'] + descs)

# entry point

if __name__ == '__main__':
    # get subcommand
    if len(argv) >= 2:
        cmd = argv[1]
    else:
        cmd = None
    if cmd not in SUBCOMMANDS:
        # no subcommand: print help or error message
        if len(argv) > 2:
            # got other arguments
            cmd = False
        op = mk_op_basic(*SUBCOMMANDS)
        if cmd is None or cmd in ('-h', '--help'):
            op.print_help()
            ret = 0
        elif cmd == '--version':
            print op.get_prog_name(), '0.1.0'
            ret = 0
        else:
            # no arguments or unknown subcommand
            prog = op.get_prog_name()
            op.error('expected a subcommand: try `%s help\'' % prog)
            ret = ERR_ARGS
    else:
        # got subcommand: parse options
        cmd = argv[1]
        op = mk_op(cmd)
        options, args = op.parse_args(argv[2:])
        # handle verbose
        global loud
        loud = cmd in LOUD
        global verbose
        verbose = options.verbose
        info('received options:', options)
        info('received arguments:', args)
        del options.verbose
        # check positional arguments
        expected_args = ARGS[cmd]
        n_got = len(args)
        for i, arg in enumerate(expected_args):
            if n_got <= i:
                op.error('%s: expected %s argument' % (cmd, arg))
        var = cmd in VAR_ARGS
        n_expected = VAR_ARGS[cmd] if var else None
        var = var and n_expected is None
        if n_expected is None:
            n_expected = len(expected_args)
        if not var and n_got > n_expected:
            msg = '%s: got too many arguments (expected %s, got %s)'
            op.error(msg % (cmd, n_expected, n_got))
        # run subcommand
        f = CMD_FNS[cmd]
        if var:
            args = args[:n_expected] + [args[n_expected:]]
        ret = f(*args, **options.__dict__)
    exit(ret)